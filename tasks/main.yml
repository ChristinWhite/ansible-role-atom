---

# install atom
# =============================================================================

# install atom from homebrew cask
- name: install atom
  homebrew_cask: name='atom' state=present
  register: install_atom_output
  when:
    - stable is defined
    - stable

# tap homebrew cask versions
- name: tap homebrew cask versions
  homebrew_tap:
    name: caskroom/versions
    state: present
  register: tap_homebrew_cask

# install atom beta from homebrew cask versions
- name: install atom beta
  homebrew_cask: name='atom-beta' state=present
  register: install_atom_beta_output
  when:
    - beta is defined
    - beta

# ensure apm (atom package manager) is installed
- name: ensure apm installed
  command: which apm
  register: apm_installed_status
  failed_when: apm_installed_status.rc
  changed_when: false
  check_mode: no

# apm (atom package manager) commands
# =============================================================================

# apm clean : delete unused packages in node_modules
- name: 'apm clean'
  command: apm clean
  register: apm_clean_output
  when: clean is defined

# apm config : set environment and configuration variables for atom
- name: 'apm config'
  command: 'apm config {{ item.command }} {{ item.key | default(omit) }} {{ item.value | default(omit) }}'
  register: apm_config_output
  when:
    - item is defined
    - item.command is defined
    - item.command != 'edit'
  with_items: '{{ config }}'

# apm dedupe : deduplicate all node_module packages
- name: 'apm dedupe all'
  command: 'apm dedupe'
  register: apm_dedupe_all_output
  when:
    - dedupe_all_packages is defined
    - dedupe_all_packages

# apm dedupe : deduplicate individual node_module packages
- name: 'apm dedupe'
  command: 'apm dedupe {{ item }}'
  register: apm_dedupe_output
  when: item is defined
  with_items: '{{ dedupe_packages }}'

# develop

# apm disable : disable packages
- name: 'apm disable packages'
  command: 'apm disable {{ item }}'
  register: apm_disable_output
  when: item is defined
  with_items: '{{ disable_packages }}'

# docs
- name: 'apm docs for packages'
  command: 'apm docs {{ item }}'
  register: apm_docs_output
  when: item is defined
  with_items: '{{ docs_packages }}'

# apm enable : enable packages
- name: 'apm enable packages'
  command: 'apm enable {{ item }}'
  register: apm_enable_output
  when: item is defined
  with_items: '{{ enable_packages }}'

# apm featured : list currently featured packages
- name: apm featured packages
  command: 'apm featured'
  register: apm_featured_output
  when: item is defined
  with_items: '{{ featured_packages_options }}'

# init

# apm install : install atom packages
- name: 'apm install packages'
  command: 'apm install {{ item }}'
  ignore_errors: true
  register: apm_install_packages_output
  when:
    - item is defined
    - item | search( '--packages-file' ) != true
  with_items: '{{ packages }}'

# apm install : copy packages file to Ansible host
- name: 'copy package files to host'
  copy: src='{{ item }}' dest=/tmp
  when: item is defined
  with_items: '{{ package_files }}'

# apm install : install packages listed in packages file
- name: 'apm install package_files'
  command: 'apm install --packages-file "/tmp/{{ item }}"'
  ignore_errors: true
  register: apm_install_files_output
  when: item is defined
  with_items: '{{ package_files }}'

# link

# links

# apm list : list packages
- name: 'apm list packages'
  command: 'apm list {{ item | default(omit) }}'
  ignore_errors: true
  regiser: apm_list_output
  when: item is defined
  with_items: '{{ list_options }}'

# login

# publish

# rebuild-module-cache

# search

# star

# stars

# test

# apm uninstall : unistall atom packages
- name: 'apm uninstall packages'
  command: 'apm uninstall {{ item }}'
  ignore_errors: true
  register: apm_uninstall_output
  when: item is defined
  with_items: '{{ uninstall }}'

# unlink

# unpublish

# unstar

# apm upgrade : upgrade all atom packages to latest versions
- name: 'apm upgrade all packages'
  command: 'apm upgrade'
  ignore_errors: true
  register: apm_upgrade_all_packages_output
  when:
    - upgrade_all_packages is defined
    - upgrade_all_packages

# apm upgrade : upgrade individual atom packages to latest versions
- name: 'apm upgrade packages'
  command: 'apm upgrade {{ item | default (omit) }}'
  ignore_errors: true
  register: apm_upgrade_output
  when: item is defined
  with_items: '{{ upgrade_packages }}'

# view

# atom dotfiles
# =============================================================================

# include file

# symlink from icloud, dropbox or another cloud sync provider

# read from repo

# write from repo
