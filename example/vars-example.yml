---

### apps-atom Variables
#
# Overview: Configure the preferences and packages that Atom uses
#
# Description:
#   Define your preferences for Atom below, default variables have been set but are set to be as neutral and nondestructive as possible
#
###

# Core Configuration
# =============================================================================

### Install Beta
#
# Required: no
# Type: boolean
# Default: false
#
# Description:
#   Installs the beta version of Atom from Homebrew Cask
#
beta: true

### Install Packages
#
# Required: no
# Type: list
# Default: false
#
# Command:
#   apm install {{ packages }}
#
# Command --help:
#   Usage: apm install [<package_name>...]
#      apm install <package_name>@<package_version>
#      apm install <git_remote>
#      apm install <github_username>/<github_project>
#      apm install --packages-file my-packages.txt
#      apm i (with any of the previous argument usage)
#
#   Install the given Atom package to ~/.atom/packages/<package_name>.
#
#   If no package name is given then all the dependencies in the package.json file are installed to the node_modules folder in the current working directory.
#
#   A packages file can be specified that is a newline separated list of package names to install with optional versions using the `package-name@version` syntax.
#
#   Options:
#     --check           Check that native build tools are installed                            [boolean]
#     --verbose         Show verbose debug information                        [boolean] [default: false]
#     --packages-file   A text file containing the packages to install                          [string]
#     --production      Do not install dev dependencies                                        [boolean]
#     -c, --compatible  Only install packages/themes compatible with this Atom version          [string]
#     -h, --help        Print this usage message
#     -s, --silent      Set the npm log level to silent                                        [boolean]
#     -q, --quiet       Set the npm log level to warn                                          [boolean]
#
#      Prefix an option with `no-` to set it to false such as --no-color to disable colored output.
#
# Note:
#   All of the options are supported except for --package-file but not all of them make sense in the context of Ansible unless you're doing some kind of output logging.
#
packages:
  - aligner
  - aligner-css --check -- verbose --production --compatible
  - aligner-javascript --silent
  - aligner-php --quiet
  - aligner-scss@1.3.0
  - adrianlee44/atom-aligner-ruby
  - https://github.com/adrianlee44/atom-aligner-stylus

### Install Packages from File
#
# Required: no
# Type: list (filenames)
# Default: false
#
# Command:
#   apm install --package-file {{ package_files }}
#
# Description:
#   This task uses the same install command as the install packages but allows you to pass a plaintext file listing packages delineated by new lines.
#
# Requirement:
#   Plaintext files should be placed within the files folder in the role and should only include the filename. The path is provided by the role.
#
package_files:
  - 'packages.txt'

### Uninstall Packages
#
# Required: no
# Type: list
# Default: false
#
# Command:
#   apm uninstall {{ packages }}
#
# Command --help:
#   Usage: apm uninstall <package_name>...
#
#   Delete the installed package(s) from the ~/.atom/packages directory.
#
#   Options:
#     --hard      Uninstall from ~/.atom/packages and ~/.atom/dev/packages [boolean]
#     -d, --dev   Uninstall from ~/.atom/dev/packages                      [boolean]
#
# Note:
#   All of the options are supported
#
uninstall:
- alginer-luo

# Less Common Settings
# =============================================================================

### clean
#
# Required: no
# Type: boolean
# Default: false
#
# Command:
#   apm clean
#
# Command --help:
#   Deletes all packages in the node_modules folder that are not referenced as a dependency in the package.json file.
#
clean: true

### config
#
# Required: no
# Type: array
# Default: false
#
# Command:
#   apm config {{ config.command }} {{ config.key }} {{ config.value }}
#
# Command --help:
#   Usage: apm config set <key> <value>
#          apm config get <key>
#          apm config delete <key>
#          apm config list
#          apm config edit
#
# Note:
#   All options are supported except for edit but not all of them make sense in the context of Ansible unless your doing some kind of output logging. Set and delete are the only options you would commonly use. Trying to use edit will be skipped altogether to prevent the text editor from hijacking the shell
#
config:
  - { command: 'set', key: 'some key', value: 'some value' }
  - { command: 'delete', key: 'some key'}

### dedupe
#
# Required: no
# Type: list
# Default: false
#
# Command:
#   apm dedupe {{ dedupe.packages }}
#
# Command --help:
#   Usage: apm dedupe [<package_name>...]
#
#   Reduce duplication in the node_modules folder in the current directory.
#
#   This command is experimental.
#
# Note:
#   It appears that you can run this without specifying a package to presumably dedupe all but this has not been tested.
#
dedupe:
  -
  - 'some package'
