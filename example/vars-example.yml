---

### apps-atom variables
#
# Overview: Configure the preferences and packages that Atom uses
#
# Description:
#   Define your preferences for Atom below, default variables have been set but are set to be as neutral and nondestructive as possible
#
# Note:
#   Many of the commands and options below may not make sense to use in the context of Ansible because the output will not be written to your shell; however, when combined with logging they may be helpful in some edge cases.
#
###

# install atom
# =============================================================================

### install stable version
#
# Required: no
# Type: boolean
# Default: true
#
# Description:
#   Installs Atom from Homebrew Cask
#
stable: true

### install beta version
#
# Required: no
# Type: boolean
# Default: false
#
# Description:
#   Installs the beta version of Atom from Homebrew Cask
#
beta: true

# core package commands
# =============================================================================

### install packages
#
# Required: no
# Type: sequence
# Default: false
#
# Command:
#   apm install {{ packages }}
#
# Command --help:
#   Usage: apm install [<package_name>...]
#      apm install <package_name>@<package_version>
#      apm install <git_remote>
#      apm install <github_username>/<github_project>
#      apm install --packages-file my-packages.txt
#      apm i (with any of the previous argument usage)
#
#   Install the given Atom package to ~/.atom/packages/<package_name>.
#
#   If no package name is given then all the dependencies in the package.json file are installed to the node_modules folder in the current working directory.
#
#   A packages file can be specified that is a newline separated list of package names to install with optional versions using the `package-name@version` syntax.
#
#   Options:
#     --check           Check that native build tools are installed                            [boolean]
#     --verbose         Show verbose debug information                        [boolean] [default: false]
#     --packages-file   A text file containing the packages to install                          [string]
#     --production      Do not install dev dependencies                                        [boolean]
#     -c, --compatible  Only install packages/themes compatible with this Atom version          [string]
#     -h, --help        Print this usage message
#     -s, --silent      Set the npm log level to silent                                        [boolean]
#     -q, --quiet       Set the npm log level to warn                                          [boolean]
#
# Note:
#   All of the options are supported except for --package-file which can be used in the next variable
#
packages:
  - aligner
  - 'aligner-css --check -- verbose --production --compatible > aligner-css.txt'
  - aligner-javascript --silent
  - aligner-php --quiet
  - aligner-scss@1.3.0
  - adrianlee44/atom-aligner-ruby
  - https://github.com/adrianlee44/atom-aligner-stylus

### install packages from file
#
# Required: no
# Type: sequence
# Default: false
#
# Command:
#   apm install --package-file {{ package_files }}
#
# Description:
#   This task uses the same install command as the install packages but allows you to pass a plaintext file listing packages delineated by new lines.
#
# Requirement:
#   - plaintext files should be placed within the files folder in the role and should only include the filename.
#
package_files:
  - 'packages.txt'

### enable packages
#
# Required: no
# Type: sequence
# Default: false
#
# Command:
#   apm disable {{ disable_packages }}
#
# Command --help:
#   Usage: apm enable [<package_name>]...
#
#   Enables the named package(s).
#
enable_packages:
  - aligner

### disable packages
#
# Required: no
# Type: sequence
# Default: false
#
# Command:
#   apm disable {{ disable_packages }}
#
# Command --help:
#   Usage: apm disable [<package_name>]...
#
#   Disables the named package(s).
#
disable_packages:
  - aligner-css

### uninstall packages
#
# Required: no
# Type: sequence
# Default: false
#
# Command:
#   apm uninstall {{ packages }}
#
# Command --help:
#   Usage: apm uninstall <package_name>...
#
#   Delete the installed package(s) from the ~/.atom/packages directory.
#
#   Options:
#     --hard      Uninstall from ~/.atom/packages and ~/.atom/dev/packages [boolean]
#     -d, --dev   Uninstall from ~/.atom/dev/packages                      [boolean]
#
# Note:
#   All of the options are supported
#
uninstall:
- alginer-luo

### upgrade all packages
#
# Required: no
# Type: boolean
# Default: false
#
# Command:
#   apm upgrade
#
# Command --help:
#   Usage: apm upgrade
#          apm upgrade --list
#          apm upgrade [<package_name>...]
#
#   Upgrade out of date packages installed to ~/.atom/packages
#
#   This command lists the out of date packages and then prompts to install
#   available updates.
#
#   Options:
#     --json         Output outdated packages as a JSON array                                  [boolean]
#     --compatible   Only list packages/themes compatible with this Atom version                [string]
#     --verbose      Show verbose debug information                           [boolean] [default: false]
#     -c, --confirm  Confirm before installing updates                         [boolean] [default: true]
#     -h, --help     Print this usage message
#     -l, --list     List but don't install the outdated packages                              [boolean]
#
# Note:
#   If you need to specify individual packages or use any of the options please use the next variable
#
upgrade_all_packages: true

### upgrade packages
#
# Required: no
# Type: sequence
# Default: false
#
# Command:
#   apm upgrade {{ upgrade_packages }}
#
# Description:
#   Upgrade packages uses the same basic command as the previous variable but takes a sequence instead of a boolean so that you can specify individual packages and/or options
#
upgrade_packages:
  - aligner
  - aligner-css --compatible
  - '--list > package_upgrades.txt'

# other package commands
# =============================================================================

### clean
#
# Required: no
# Type: boolean
# Default: false
#
# Command:
#   apm clean
#
# Command --help:
#   Deletes all packages in the node_modules folder that are not referenced as a dependency in the package.json file.
#
clean: true

### config
#
# Required: no
# Type: dictionary
# Default: false
#
# Command:
#   apm config {{ config.command }} {{ config.key }} {{ config.value }}
#
# Command --help:
#   Usage: apm config set <key> <value>
#          apm config get <key>
#          apm config delete <key>
#          apm config list
#          apm config edit
#
# Note:
#   All options are supported except for edit. Trying to use edit will be skipped altogether to prevent the text editor from hijacking the shell
#
config:
  - { command: 'set', key: 'some key', value: 'some value' }
  - { command: 'delete', key: 'some key'}

# TODO: config edit with file or template

### dedupe all packages
#
# Required: no
# Type: boolean
# Defualt: false
#
# Command --help:
#   Usage: apm dedupe [<package_name>...]
#
#   Reduce duplication in the node_modules folder in the current directory.
#
#   This command is experimental.
#
dedupe_all_packages: true

### dedupe packages
#
# Required: no
# Type: sequence
# Default: false
#
# Command:
#   apm dedupe {{ dedupe.packages }}
#
# Description:
#   dedupe packages uses the same basic command as the previous variable but takes a sequence instead of a boolean so that you can specify individual packages to dedupe.
#
dedupe_packages:
  - 'some package'

### docs packages
#
# Required: no
# Type: sequence
# Default: false
#
# Command:
#   apm dedupe {{ dedupe.packages }}
#
# Command --help:
#   Usage: apm docs [options] <package_name>
#
#   Open a package's homepage in the default browser.
#
#   Options:
#     -h, --help   Print this usage message
#     -p, --print  Print the URL instead of opening it                                         [boolean]
#
# Notes:
#   The number of uses for this in the context of ansible are pretty limited but using the --print option might be helpful if logging
#
docs_packages:
  - aligner
  - 'linter > /tmp/atom\ package_linter.txt'

### list packages
#
# Required: no
# Type: sequence
# Default: false
#
# Command:
#   apm list {{ list_options }}
#
# Command --help:
#   Usage: apm list
#          apm list --themes
#          apm list --packages
#          apm list --installed
#          apm list --installed --bare > my-packages.txt
#          apm list --json
#
#   List all the installed packages and also the packages bundled with Atom.
#
#   Options:
#     -b, --bare       Print packages one per line with no formatting                          [boolean]
#     -d, --dev        Include dev packages                                    [boolean] [default: true]
#     -h, --help       Print this usage message
#     -i, --installed  Only list installed packages/themes                                     [boolean]
#     -j, --json       Output all packages as a JSON object                                    [boolean]
#     -l, --links      Include linked packages                                 [boolean] [default: true]
#     -t, --themes     Only list themes                                                        [boolean]
#     -p, --packages   Only list packages                                                      [boolean]
#
# Notes:
#   Unless you're logging the output this command isn't very useful in the context of Ansible
#
list_options:
  - --themes
  - '--installed --bare > my-packages.txt'
  - '--json > my-packages.json'
  - '--themes --json --bare > /tmp/atom\ themes.json'
